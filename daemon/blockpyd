#!/bin/env python3

import datetime, json
import time
import os
import calendar


path_to_json = "/etc/blockpy/blockpy.json"
path_to_host="/etc/hosts"


banner = "##-----GENERATED BY BLOCKPY-----##"

def load_json():
    json_file = open(path_to_json,'r+')
    text = json_file.read()
    json_file.close()
    return json.loads(text)

def is_time_between(begin_time, end_time, check_time=None):
    # If check time is not given, default to current UTC time
    check_time = check_time or datetime.datetime.utcnow().time()
    if begin_time < end_time:
        return check_time >= begin_time and check_time <= end_time
    else: # crosses midnight
        return check_time >= begin_time or check_time <= end_time

def load_host_file():
    json_file = open(path_to_host,'r+')
    text = json_file.read()
    json_file.close()
    sp = text.split(banner)
    return sp[0]

def write_host_file(text):
    json_file = open(path_to_host,'w')
    json_file.write(text)
    json_file.close()


euid = os.geteuid()
if(euid != 0):
    print("Please run as root")
    exit (2)
if( not os.path.exists(path_to_json)):
    print(path_to_json+" does not exist. Exiting.")
    exit(0)

now = datetime.datetime.now()

today = datetime.datetime.today().weekday()
day_name = calendar.day_name[today]

hour = now.hour
minute = now.minute
print(f"Running at {hour}:{minute} on {day_name}")

out =banner + "\n"
websites = load_json()
for website in websites :
    value = websites[website]

    turn_on = int(value[0])
    turn_off = int(value[1])
    
    if (len(value) < 3):
        value.append([0,1,2,3,4,5,6])
    days = value[2]

    if(today not in days):
        print(f"{website} is not blocked on {day_name}s.")
        continue

    between = is_time_between(datetime.time(turn_on, 00), datetime.time(turn_off, 00), datetime.time(hour,00))
    if(between):
        print("%s is blocked" % website)
        out += "0.0.0.0 %s \n"%website
        out += "0.0.0.0 www.%s \n"%website
        out += "0.0.0.0 https://www.%s \n"%website
        continue

    print(f"{website} is not blocked at {hour}:{minute}.")

host_prev = load_host_file()
write_host_file(host_prev+out)